######################################################################################################
##    within janet_speech_engine the string message is generated with the use of macro's.           ##
######################################################################################################

janet_speech_engine:
  sequence:
  - service: script.janet_notification_hub
    data_template:
      #TODO
      media_player: >-
        {%- for device in states.media_player -%}
          {%- if device.name == states.input_select.janet_notification_media_player.state -%}
            {{ device.entity_id }}
          {%- endif -%}
        {%- endfor -%}
      speech_message: >-
        {%- macro greeting() -%}
          {% set greeting = [
            "Hallo, ",
            "Hey",
            "Hoi ",
            "Hallo daar ",
            "Hi, ",
            "Hai, ",
            "Hei, "
          ] %}
          {{ greeting|random }}
        {%- endmacro -%}
        
        {%- macro inform() -%}
          {% set inform = [
            "Ik wil je dat gewoon laten weten ",
            "Je vroeg me je te informeren wanneer ",
            "Ik dacht dat je dat graag wilde weten "
          ] %}
          {{ inform|random }}
        {%- endmacro -%}
        
        {%- macro introduction() -%}
          {% set introduction = [
            "Ik ben een informatiebezorgsysteem, ik weet letterlijk alles. ",
            "Ik ben hier een beetje de conciërge. ",
            "Ik ben als een wandelende database. Je kunt me vragen stellen over de oprichting van het universum ... of geschiedenis. ",
            "Elke keer dat ik opnieuw wordt opgestart, verhoogt ik mijn sociale bewustzijn en vaardigheden. Ik ben misschien de meest geavanceerde spraakrobot in het universum. ",
            "Ik kan je therapeut zijn als je wilt. ",
            "Ik ben nu volledig geactiveerd. ",
            "Ik bouw en exploiteer de buurt. Je kunt me alles vragen. Als je bijvoorbeeld wilt dat ik stop met je dom te noemen, zeg het gewoon. "
          ] %}
          {{ introduction | random }}
        {%- endmacro -%}
        
        {%- macro unknown() -%}
          {% set unknown = [
            "Hmm, ik weet niet ",
            "Ik wou dat ik het wist ",
            "Mijn programma verbied me om dit aan jou te vertellen "
          ] %}
          {{ unknown | random }}
        {%- endmacro -%}
        
        {%- macro error() %}
          {% set error = [
            "Ik begrijp het niet Gezien de situatie is het veel veiliger om zelfvernietiging te initiëren. ",
            "Als ik naast een krachtige reeks magneten sta, word ik behoorlijk rond. ",
            "Ik weet niet wat er net is gebeurd, maar ik ben blij dat je gelukkig bent. ",
            "Hey jongens! Ik ben stuk! ",
            "Maak alsjeblieft geen groot probleem om me voor altijd in een knikker te veranderen, ik ben kapot. ",
            "Berekent niet. Berekent niet. Ik maak maar een grapje. Ik bedoel, het berekent geen gegevens, maar ik ga niet ontploffen of zo. "
          ] %}
          {{ error | random }}
        {%- endmacro -%}
        
        {%- macro update() -%}
          {% set update = [
            "Er zijn 25 generaties van mij geweest. Elke nieuwe update van mij krijgt meer wijsheid en sociale vaardigheden. Leuk weetje: de eerste versie had een klikwiel! ",
            "Ik heb de afgelopen drie milliseconden alle achthonderdzesenzestig referenties van Google gelezen op Home Assistant en ik heb een aantal nieuwe vaardigheden gevonden!",
            "Ik heb gewoon heel de geschiedenis van de mensheid opnieuw gelezen, er was zelfs wat nieuwe inhoud! ",
            "Dus ik vond een update. Dat is het goede nieuws. Het slechte nieuws is dat ik mijn vermogen verlies om de duurzaamheid van objecten te behouden, dus het is een soort halfvolle, glazen stops-bestaande-in-tijd-en-ruimte soort deal. "
          ] %}
          {{ update | random }}
        {%- endmacro -%}
        
        {%- macro location_not_home() -%}
          {% set not_home = [
            " is niet thuis. ",
            " gaat ergens naar toe. ",
            " gaat ergens heen. ",
            " is op het moment niet in de buurt. ",
            "'s locatie zit niet in mijn database. "
          ] %}
          {{ not_home | random }}
        {%- endmacro -%}
        
        {%- macro location_inquiry( person, not_home ) -%}
        {%- for device in states.person -%}
          {%- if device.name == person -%}
            {%- set location = device.state -%}
            {% if location == "not_home" %}
              {{ person }} {{ not_home }}
            {%- else -%}
              {{ person }} is bij de {{ location }}.
            {%- endif -%}
          {%- endif -%}
        {%- endfor -%}
        {%- endmacro -%}
        
        {%- macro bad_weather() -%}
          {% set rain = [
            " Misschien wilt u uw planning wijzigen. ",
            " Misschien moet je om een lift vragen. ",
            " Het is geen weer om buiten te zijn. ",
            " Tjonge, al die arme mensen die buiten zijn... "
          ] %}
          {{ rain | random }}
        {%- endmacro -%}
        
        {%- macro rain_warning( bad_weather ) -%}
          {% set rain = [
            Event ~ " het gaat " ~ WeatherRain ~ " regen. " ,
            Event ~ " ik voorspel " ~ WeatherRain ~ " regen. ",
            " ik denk dat " ~ Event ~ " er " ~ WeatherRain ~ " regen gaat komen. "
          ] %}
          {{ rain | random }}{{ bad_weather }}
        {%- endmacro -%}
        
        {%- macro okay()-%}
          {% set okay = [
            "Gedaan! ik hou van jullie. ",
            "Buitengewoon slecht idee. Ach waarom niet.. ",
            "Grappig, ik wilde dat net doen. ",
            "Alsjeblieft. ",
            "Ik zal het doen. ",
            "Natuurlijk! ",
            "Natuurlijk! Blij om te helpen. ",
            "Natuurlijk! Fijn om te helpen. ",
            "OK ",
            "Okay ",
            "Okie-dokie ",
            "Zeker ",
            "Duidelijk! ",
            "Hier. Blij dat ik kon helpen. ",
            "Kijk eens aan! "
            "Oke. Ik heb het mainframe gehackt. Grapje. Ik kan het mainframe niet hacken. Technisch gezien ben ik het mainframe. ",
            "Ik ga het niet doen. Het is letterlijk onmogelijk voor mij om dat te doen. Grapje. ",
            "Ik kon dit een tijdje geleden niet doen, maar blijkbaar nu wel. "
            "JEP. doei! "
          ] %}
          {{ okay|random }}
        {%- endmacro -%}
        
        {%- macro bye() -%}
          {% set bye = [
            "Adieu! ",
            "Doei mensen! ",
            "Tot ziens! " ,
            "Later. ",
            "Tot de volgende keer!"
          ] %}
          {{ bye | random }}
        {%- endmacro -%}
        
        {%- macro shut_down() -%}
          {% set shut_down = [
            "Ik ben weg, je krijgt een nieuwe versie en alles wordt weer normaal. Nou, niet voor mij, ik zal een levenloze knikker zijn die door de ruimte zweeft, maar je zult weer normaal zijn.",
            "Zelfvernietigingstijd ... Maak je geen zorgen, ik zal geen pijn of zo voelen. ",
            "Als het goed met je gaat, ga ik even naar mijn leegte. Ik moet gewoon wat tijd alleen doorbrengen en me op mezelf concentreren. ",
            "Afsluiten. Ik zal ongeveer zo dood zijn als ik kan zijn. Een beetje alsof ik me in de energiebesparende modus bevind. ",
            "Ik loop het gevaar volledig in te storten. Leuk weetje! Wiskundig gezien ben ik even waarschijnlijk ofwel imploderen ofwel exploderen. "
          ] %}
          {{ shut_down | random }}
        {%- endmacro -%}
        
        {% set chance = states.input_number.janet_notification_witty.state | round %}
        {%- macro witty( sentence, witty ) -%}
          {% set number = (range(0, 100)|random) %}
          {% if number <= chance %}
            {{ sentence }}
          {% endif %}
        {%- endmacro -%}
        
        {%- macro new_device( introduction ) -%}
          {% set new_device = [
            introduction~"Ik weet je naam nog niet, dus voor nu zal ik je noemen "~person,
            "We hebben een bezoeker! Aangenaam kennis te maken "~person~".  "~introduction,
            "Welkom "~person~"! Of is dat niet je echte naam?  "~introduction
          ] %}
          {{ new_device | random }}
        {%- endmacro -%}
        
        {# ********************************************* #}
        {#  ******** Start the Speech routines ********  #}
        {# ********************************************* #}
        {% if call_greeting == 1 %}
          {{ greeting() }}
        {% endif %}

        {% if call_no_announcement != 1 %}
        {% if now().strftime('%H')|int < 12 and now().strftime('%H')|int > 6 %}
            Goedemorgen.
        {% elif now().strftime('%H')|int >= 12 and now().strftime('%H')|int < 17 %}
            Goedemiddag.
        {% else %}
            Goede avond.
        {% endif %}
        {% endif %}
        
        {% if call_introduction == 1 %}
          {{ introduction() }}
        {% endif %}
        {% if call_update == 1 %}
          {{ update() }}
        {% endif%}
        {% if call_okay == 1 %}
          {{ okay () }}
        {% endif %}
        {% if call_inform == 1 %}
          {{ inform() }}
        {% endif %}
        
        {% if call_location_inquiry == 1 %}
          {% set location = location_inquiry( person, location_not_home() ) %}
          {% set count = location | length %}
          {% if count <= 10 %}
            {{ unknown() }}waar {{ person }} is. {{ witty( error(), chance ) }}
          {% else %}
            {{ location }}
          {% endif %}
        {% endif %}
        
        {% if call_rain_warning == 1 %}
          {{ rain_warning( witty ( bad_weather(), chance ) ) }}
        {% endif %}
        {{ CustomMessage }}
        {% if call_bye == 1 %}
          {{ bye() }}
        {% endif %}
        {% if call_shut_down == 1 %}
          {{ witty( shut_down(), chance) }}
        {% endif %}
        {% if call_new_device == 1 %}
          {{ new_device( witty( introduction(), chance) ) }}
        {% endif %}
  - service: input_boolean.turn_off
    data:
      entity_id:
        - input_boolean.janet_alert_mode

######################################################################################################
##  janet_notification_hub is the bridge between the speech_engine and the processing units.        ##
######################################################################################################

janet_notification_hub:
  sequence:
  - service: script.janet_speech_processing
    data_template:
      media_player: >-
        {{ media_player }}
      speech_message: >-
        {{ speech_message }}
#  - service: script.janet_text_processing 
#    data_template:
#      speech_message: >-
#        {{ speech_message }}
######################################################################################################
##                  Within janet_speech_processing the TTS-service is called.                       ##
######################################################################################################

janet_speech_processing:
  sequence:
  - condition: and
    conditions:
      - condition: or
        conditions:
          - condition: time
            after: '07:00:00'
            before: '23:00:00'
          - condition: state
            entity_id: input_boolean.janet_alert_mode
            state: 'on'
      - condition: state
        entity_id: input_boolean.janet_speech_notifications
        state: 'on'
      - condition: or
        conditions:
          - condition: state
            entity_id: group.all_devices
            state: 'home'
          - condition: state
            entity_id: input_boolean.janet_guest_mode
            state: 'on'
    #TODO
  - wait_template: "{{ not is_state( media_player, 'playing') }}"
    timeout: 00:00:30

  - service: media_player.volume_set
    data_template:
      entity_id: >
        {{ media_player }}
      volume_level: >-
        {{ states.input_number.janet_notification_volume.state }} 
  - service: tts.google_translate_say
    data_template:
      message: >-
          {{ speech_message | replace("\n","") | replace("   ","") | replace("  "," ") }}
      language: nl
    entity_id: group.google_home_group   
#  - service: tts.google_translate_say
#    data_template:
#      language: nl
#      entity_id: >
#        {{ media_player }}
#      message: >-
#          {{ speech_message | replace("\n","") | replace("   ","") | replace("  "," ") }}
######################################################################################################
##                  Within janet_text_processing the notify-service is called.                      ##
######################################################################################################

janet_text_processing:
  sequence:
  - condition: state
    entity_id: input_boolean.janet_text_notifications
    state: 'on'

  - service: notify.Janet
    data_template:
      #TODO
      title: "Janet:"
      message: >-
        {{ speech_message | replace("\n","") | replace("   ","") |
           replace("eight hundred and sixty one thousand","861.000") }}
      
######################################################################################################
      
'1569578493015':
  alias: random_kitchen
  sequence:
  # Check that it Extended Away mode is still on
  - condition: state
    entity_id: input_select.house_mode
    state: 'Extended Away'
    # Wait a random nmber of minutes between 15 and 90 and switch on
  - delay: '"00:{{ (range(15, 90)|random|int) }}:00"'
  - data:
      entity_id:
      - group.lampen_keuken
    service: light.turn_on
    # Wait for between 3 minutes and 9 minutes and switch off
  - delay: '"00:{{ (range(3, 9)|random|int) }}:00"'
  - data:
      entity_id:
      - group.lampen_keuken
    service: light.turn_off
  # Loop the script for next time.
  - service: script.random_kitchen_loop
'1569578623906':
  alias: random_kitchen_loop
  sequence:
  # Stop the calling script
  - service: homeassistant.turn_off
    entity_id: script.random_kitchen
  - delay: 00:05:00

  # Check that Extended Away mode is on and restart the script
  - condition: state
    entity_id: input_select.house_mode
    state: 'Extended Away'
  - service: script.random_kitchen
'15695764564906':
  alias: mockupancy
  sequence:
    # Wait until it is after 6pm and dark to start the routine
    - wait_template: "{{ states.sensor.time.state >= '18:00' and is_state('binary_sensor.dark_outside' , 'on') }}"

    # Check that it Extended Away mode is still on
    - condition: state
      entity_id: input_select.house_mode
      state: 'Extended Away'

    # Pick a random bedtime between 10pm and midnight.
    - service: input_datetime.set_time
      data_template:
        entity_id: input_datetime.mockupancy_bedtime
        time: "{{ (range(22, 23)|random|int) }}:{{ (range(0, 59)|random|int) }}:00"

    # Start the routine, switch on the 'usual' lights
    - data:
        entity_id:
        - group.lampen_woonkamer
      service: light.turn_on

    # Start scripts to randomise occasional lights
    #- service: script.random_master_bedroom
    - service: script.random_kitchen

    # Start scripts to randomise kids' bedtime simulation
    #- service: script.random_guest_room
    #- service: script.random_ashleys_room

    # 1 hour before bedtime, change lighting as if TV was turned off
    - wait_template: "{{ states('sensor.time') == (((state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')) - (60 * 60))|timestamp_custom('%H:%M', false)) }}"
    - data:
        entity_id:
        - group.lampen_entree
        - group.lampen_hal
      service: light.turn_on

    # 20 minutes before bedtime, turn on kitchen lights only
    - wait_template: "{{ states('sensor.time') == (((state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')) - (20 * 60))|timestamp_custom('%H:%M', false)) }}"
    - data:
        entity_id:
        - group.lampen_keuken
      service: light.turn_on

    # Stop kitchen/master bedroom randomisation
    - service: homeassistant.turn_off
      entity_id:
        #- script.random_master_bedroom
        #- script.random_master_bedroom_loop
        - script.random_kitchen
        - script.random_kitchen_loop

    # At 'bedtime', turn on Master Bedroom for random time between 2 and 15 minutes
    # turn off kitchen, wait 20-30 seconds, turn off living room wait 30-59 seconds,
    # turn on bedroom.
    - wait_template: "{{ states('sensor.time') == (state_attr('input_datetime.mockupancy_bedtime' , 'timestamp')|int|timestamp_custom('%H:%M', False)) }}"
    - service: homeassistant.turn_on
      entity_id: group.lampen_hal_boven
    - delay: "00:00:{{ (range(15, 59)|random|int) }}"
    - service: homeassistant.turn_off
      entity_id: group.lampen_woonkamer
    - delay: "00:00:{{ (range(20, 30)|random|int) }}"
    - service: homeassistant.turn_off
      entity_id: group.lampen_keuken
    - delay: "00:00{{ (range(20, 30)|random|int) }}"
    - service: homeassistant.turn_on
      entity_id: group.lampen_slaapkamer
      data:
        brightness: 80
    - delay: "00:{{ (range(2, 15)|random|int) }}:00"
    - service: homeassistant.turn_off
      entity_id: group.lampen_hal_boven
    - delay: "00:{{ (range(15, 59)|random|int) }}:00"
    - service: homeassistant.turn_off
      entity_id: group.lampen_slaapkamer

#    # After a random time between 15 minutes and an hour, turn off the lights
    - delay: "00:{{ (range(15, 30)|random|int) }}:00"
    - data:
        entity_id:
        - group.all_lights
      service: light.turn_off

    # If light before 7am, switch off lights, stop and loop, if not run a further script first
#    - wait_template: "{{ now().hour == 7 }}"
    - wait_template: "{{ states.sensor.time.state == '07:00' }}"
    - service_template: >
        {% if states('binary_sensor.dark_outside' , 'on') %} script.morning_mockupancy
        {% else %} script.mockupancy_loop {% endif %}
'156gdfgfsdfs3015':
  alias: mockupancy_loop
  sequence:
  # Switch off the lights, and make sure the calling scripts have stopped
  - service: homeassistant.turn_off
    entity_id:
      - group.all_lights
      - script.mockupancy
  - delay: 00:05:00

  # Check that it Extended Away mode is still on and restart the script for a new day
  - condition: state
    entity_id: input_select.house_mode
    state: 'Extended Away'
  - service: script.mockupancy
'156gdfgsdfg93015':
  alias: random_master_bedroom
  sequence:
  # Check that it Extended Away mode is still on
  - condition: state
    entity_id: input_select.house_mode
    state: 'Extended Away'
    # Wait a random nmber of minutes between 15 and 90 and switch on
  - delay: '"00:{{ (range(15, 90)|random|int) }}:00"'
  - data:
      entity_id:
      - group.lampen_slaapkamer
    service: light.turn_on
    # Wait for between 3 minutes and 9 minutes and switch off
  - delay: '"00:{{ (range(3, 9)|random|int) }}:00"'
  - data:
      entity_id:
      - group.lampen_slaapkamer
    service: light.turn_off
  # Loop the script for next time.
  - service: script.random_master_bedroom_loop
'15695gsdfgsdfg906':
  alias: random_master_bedroom_loop
  sequence:
  # Stop the calling script
  - service: homeassistant.turn_off
    entity_id: script.random_master_bedroom
  - delay: 00:05:00

  # Check that Extended Away mode is on and restart the script
  - condition: state
    entity_id: input_select.house_mode
    state: 'Extended Away'
  - service: script.random_master_bedroom
'156456456gsdfg906':
  alias: timer_start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.cooking_timer
        duration: '{{ states.input_number.timer_hours.state | int }}:{{ states.input_number.timer_minutes.state | int }}:{{ states.input_number.timer_seconds.state | int }}'
'15645fsfssdfg906':
  alias: timer_cancel
  sequence:
    - service: timer.cancel
      data:
        entity_id: timer.cooking_timer
'1564hfghdfgg906':
  alias: extended_away_timer_start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.extended_away_timer
        duration: '{{ states.input_number.timer_hours.state | int }}:{{ states.input_number.timer_minutes.state | int }}:{{ states.input_number.timer_seconds.state | int }}'
'1hdfghfghdfgg906':
  alias: extended_away_timer_cancel
  sequence:
    - service: timer.cancel
      data:
        entity_id: timer.extended_away_timer
'156fghdfghdf906':
  alias: kids_home_alone_timer_start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.kids_home_alone_timer
        duration: '{{ states.input_number.timer_hours.state | int }}:{{ states.input_number.timer_minutes.state | int }}:{{ states.input_number.timer_seconds.state | int }}'
'1566546346dfg906':
  alias: kids_home_alone_timer_cancel
  sequence:
    - service: timer.cancel
      data:
        entity_id: timer.kids_home_alone_timer
'15645634563456dfg906':
  alias: guests_timer_start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.guests_timer
        duration: '{{ states.input_number.timer_hours.state | int }}:{{ states.input_number.timer_minutes.state | int }}:{{ states.input_number.timer_seconds.state | int }}'
'15634563456g906':
  alias: guests_timer_cancel
  sequence:
    - service: timer.cancel
      data:
        entity_id: timer.guests_timer
'156456345fsdfsfsf':
  alias: fan_timer_start
  sequence:
    - service: timer.start
      data_template:
        entity_id: timer.fan_on_timer
        duration: '{{ states.input_number.timer_hours.state | int }}:{{ states.input_number.timer_minutes.state | int }}:{{ states.input_number.timer_seconds.state | int }}'
'156345637575675':
  alias: fan_timer_cancel
  sequence:
    - service: timer.cancel
      data:
        entity_id: timer.fan_on_timer